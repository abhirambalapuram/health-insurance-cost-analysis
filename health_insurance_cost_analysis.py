# -*- coding: utf-8 -*-
"""health-insurance-cost-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RcVDvueBvwMrTk_eECOD1J1fqPs22X3e
"""

# Core
import sys, os, textwrap, json, math, joblib
import numpy as np
import pandas as pd

# Modeling
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression, Lasso

# Metrics & plots
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt

RANDOM_SEED = 42
np.random.seed(RANDOM_SEED)
pd.set_option("display.max_columns", 100)

df = pd.read_csv("insurance.csv")
df.head()

print(df.shape)
print(df.dtypes)
print(df.isna().sum())

df.describe(include='all').T

target = "charges"
features = [c for c in df.columns if c != target]

X = df[features].copy()
y = df[target].copy()

# Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=RANDOM_SEED
)

X_train.head(), y_train.head()

# Identifying column types
num_cols = ["age", "bmi", "children"]
cat_cols = ["sex", "smoker", "region"]

# Preprocess: scale numeric, one-hot categorical
preprocess = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), num_cols),
        ("cat", OneHotEncoder(drop="first", handle_unknown="ignore"), cat_cols),
    ],
    remainder="drop"
)

linreg = LinearRegression()

linreg_pipe = Pipeline(steps=[
    ("prep", preprocess),
    ("model", linreg),
])

linreg_pipe.fit(X_train, y_train)

# Evaluating on holdout
y_pred = linreg_pipe.predict(X_test)
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)   # computing RMSE manually
mae = mean_absolute_error(y_test, y_pred)

print(f"Linear Regression — R²: {r2:.3f} | RMSE: {rmse:.2f} | MAE: {mae:.2f}")
mae = mean_absolute_error(y_test, y_pred)

print(f"Linear Regression — R²: {r2:.3f} | RMSE: {rmse:.2f} | MAE: {mae:.2f}")

cv = KFold(n_splits=5, shuffle=True, random_state=RANDOM_SEED)
cv_scores = cross_val_score(linreg_pipe, X, y, scoring="r2", cv=cv)
print("5-fold CV R²:", np.round(cv_scores, 3), " | mean:", cv_scores.mean().round(3))

lasso_pipe = Pipeline(steps=[
    ("prep", preprocess),
    ("model", Lasso(alpha=0.001, random_state=RANDOM_SEED, max_iter=10000)),
])
lasso_pipe.fit(X_train, y_train)
pred_lasso = lasso_pipe.predict(X_test)
mse_lasso = mean_squared_error(y_test, pred_lasso)
rmse_lasso = np.sqrt(mse_lasso)

print(f"Lasso — R²: {r2_score(y_test, pred_lasso):.3f} | RMSE: {rmse_lasso:.2f}")

# Predictions vs Actual
plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.xlabel("Actual charges")
plt.ylabel("Predicted charges")
plt.title("Predicted vs Actual (Linear Regression)")
# 45-degree reference line
lims = [min(y_test.min(), y_pred.min()), max(y_test.max(), y_pred.max())]
plt.plot(lims, lims)
plt.show()

# Residuals
residuals = y_test - y_pred
plt.figure(figsize=(6,4))
plt.scatter(y_pred, residuals, alpha=0.6)
plt.axhline(0, linestyle="--")
plt.xlabel("Predicted charges")
plt.ylabel("Residual (Actual - Predicted)")
plt.title("Residuals vs Predictions")
plt.show()

# Extracting feature names after one-hot encoding
ohe = linreg_pipe.named_steps["prep"].named_transformers_["cat"]
ohe_feature_names = ohe.get_feature_names_out(cat_cols)

feature_names = np.concatenate([num_cols, ohe_feature_names])
coefs = linreg_pipe.named_steps["model"].coef_

coef_df = pd.DataFrame({
    "feature": feature_names,
    "coefficient": coefs
}).sort_values(by="coefficient", key=np.abs, ascending=False)

coef_df

# Summarizing mean charges by key groups
summary = {
    "avg_charge_overall": float(df["charges"].mean()),
    "avg_charge_smokers": float(df.loc[df["smoker"]=="yes", "charges"].mean()),
    "avg_charge_nonsmokers": float(df.loc[df["smoker"]=="no", "charges"].mean()),
    "avg_charge_bmi_30plus": float(df.loc[df["bmi"]>=30, "charges"].mean()),
    "avg_charge_bmi_under30": float(df.loc[df["bmi"]<30, "charges"].mean()),
}
summary